- name: working on vm frosty
  hosts: vm
  become: true
  tasks: 
    - name: Install the packages dependencies #Installation of dependencies
      ansible.builtin.apt:
        name: 
         - ca-certificates
         - curl
         - gnupg
         - lsb-release
        state: latest
        update_cache: true

    - name: check if dependencies are installed #Check if dependencies are installed
      ansible.builtin.shell: dpkg -l 'ca-certificates' && dpkg -l 'curl' &&  dpkg -l 'gnupg' && dpkg -l 'lsb-release'
      register: certificates
      failed_when: certificates.stderr != ''
      changed_when: false

    
    - name: print result #Check message
      ansible.builtin.debug:
        msg: "Dependencies installed."

    - name: add keyrings directory #add keyring directory
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory 


    - name: add docker apt key #docker apt key adden
      ansible.builtin.apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
        keyring: /etc/apt/keyrings/docker.gpg
    
    - name: check if gpg key is installed #Check for GPG key
      ansible.builtin.shell: apt-key adv --list-public-keys --with-fingerprint --with-colons | grep docker
      register: dockergpg
      changed_when: false

    - name: print result #Check message
      ansible.builtin.debug:
        msg: "Docker GPG key installed."

    - name: Add specified repository into sources list #specific repositoriy in source list adden
      ansible.builtin.apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu focal state
        state: present

    - name: check added docker repository #Check if Docker-repository is added
      ansible.builtin.shell: cat "/etc/apt/sources.list.d/Docker.list"
      register: dockerrepo
      failed_when: dockerrepo.stderr != ''
      changed_when: false

    - name: print result #Check message
      ansible.builtin.debug:
        msg: "Docker repository added."
    
    - name: apt-get update #update application für docker
      ansible.builtin.shell: sudo apt-get update

    - name: Install the package "docker" #docker installation
      ansible.builtin.apt:
        name: 
          - docker-ce
          - docker-ce-cli 
          - containerd.io 
          - docker-compose-plugin
        state: latest

    - name: check if docker components are installed #check of installed docker components
      ansible.builtin.shell: dpkg -l 'docker-ce' && dpkg -l 'docker-ce-cli' &&  dpkg -l 'containerd.io' && dpkg -l 'docker-compose-plugin'
      register: dockercomponents
      failed_when: dockercomponents.stderr != ''
      changed_when: false

    - name: print message #Check message
      ansible.builtin.debug:
        msg: "Docker is installed."

    - name: check if docker is running #check if docker is running
      ansible.builtin.service:
        name: docker
        state: started

    - name: print message #Check message
      ansible.builtin.debug:
        msg: "Docker is running."

    - name: check if docker group is created #checkif docker group is created
      ansible.builtin.group:
        name: docker
        state: present

    - name: print message #Check message
      ansible.builtin.debug:
        msg: "Docker group is created."

    - name: Add user to docker group #snowman adminrechte für docker geben
      ansible.builtin.user:
       name: snowman
       comment: vm user
       group: docker

    - name: check if user is added to docker group #check user added Docker Group
      ansible.builtin.shell: id -nG snowman | grep -o docker
      register: dockeruser
      failed_when: dockeruser.stderr != ''
      changed_when: false

    - name: print message #User added to the Docker Group check
      ansible.builtin.debug:
        msg: "User added to the Docker group."

    - name: Test hello-world container #hello world container laufen lassen
      ansible.builtin.docker_container:
       name: DingsBumsla
       image: hello-world
       state: started

    - name: check if hello-world container is running #check ob der hello world container läuft
      ansible.builtin.shell: docker ps | grep simon/hello-world
      register: hello
      failed_when: hello.stderr != ''
      changed_when: false

    - name: print result #output if container is running check
      ansible.builtin.debug:
        msg: "Hello-world container is running."
    
    
    - name: Install Jenkins #Jenkins installation
      ansible.builtin.apt:
        name: 
          - Jenkins
        state: latest

    - name: check if Jenkins is installed #check if docker is running
      ansible.builtin.service:
        register: Jenkins
      failed_when: Jenkins.stderr != ''
      changed_when: false

    - name: print message #Check message
      ansible.builtin.debug:
        msg: "Jenkins is installed."

    - name: Start Jenkins #Start Jenkins
      ansible.builtin.service:
        name: jenkins
        state: started

    - name: check if Jenkins is running #check if Jenkins is running
      ansible.builtin.service:
        name: Jenkins
        state: started

    - name: print message #Check message
      ansible.builtin.debug:
        msg: "Jenkins has been started."

    - name: Check Jenkins status #Check if Jenkins running properly
      ansible.builtin.shell: systemctl status jenkins
      register: jenkins_status
      failed_when: jenkins_status.stderr != ''

    - name: check if Jenkins running properly #check if Jenkins running properly
      ansible.builtin.shell: systemctl status jenkins
      register: jenkins_status
      failed_when: jenkins_status.stderr != ''
      changed_when: false

    - name: print message #Check message
      ansible.builtin.debug:
        msg: "Jenkins is running properly."

    - name: Print initial admin password #Printing the initial admin password
      ansible.builtin.shell: cat /var/lib/jenkins/secrets/initialAdminPassword
      register: initial_password

    - name: Print message #Printing the inital admin password
      ansible.builtin.debug:
        msg: "Jenkins is installed and configured correctly. The initial admin password is {{ initial_password.stdout }}"


    